<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Helena Wu</title>
    <atom:link href="http://www.domain.com/helena-wu/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://www.domain.com/helena-wu/</link>
    <description>A personal portfolio and blog website</description>
    <pubDate>Fri, 05 Feb 2016 00:30:06 -0500</pubDate>
    
      <item>
        <title>Steganography with ruby</title>
        <link>http://www.domain.com/helena-wu/2016/02/05/steganography_with_rails.html</link>
        <guid isPermaLink="true">http://www.domain.com/helena-wu/2016/02/05/steganography_with_rails.html</guid>
        <description>&lt;p&gt;So recently I decided to look into what are some fun science-y things one can do with ruby, despite being a less popular language with researchers in comparison to python. So I decided to look into what one can do to embed some information into a png image.&lt;/p&gt;

&lt;p&gt;Here after some digging around I decided the RMagick library has the basic components we need to play around with pixels. (I did try to manipulate the raw binary file with much lack of success, thank god we have libraries)&lt;/p&gt;

&lt;p&gt;The idea goes like this: given an image and a string of message one wants to embed, we try to replace the least significant bits of each of the RGB colors with bits of the information we want to embed. Every byte is 8 bits, so we can divide the bits into 3-2-3 -&amp;gt; RGB. A bit of bit manipulation goes on here, intro CS class to the rescue.&lt;/p&gt;

&lt;p&gt;To give an example, we want to loop through the original image’s pixels, embed the right bits into the right colors, then store it in a new pixel struct(what is it in ruby?) that will become the new pixel at the exact same coordinates for the output image:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;new_red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0xFFF8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;C*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x07&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And we do that for as long as it takes to finish embedding the secret message, then for the rest of the pixels we just copy it over:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pixel_color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pixel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Fairly straight-forward, was not at all intuitive to me until I write the numbers on paper. To add this processing to an image in rails, if your image handler is carrierwave for instance, you could define a custom method and process it accordingly.&lt;/p&gt;
</description>
        <pubDate>Fri, 05 Feb 2016 00:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>First post</title>
        <link>http://www.domain.com/helena-wu/2015/12/30/first_post.html</link>
        <guid isPermaLink="true">http://www.domain.com/helena-wu/2015/12/30/first_post.html</guid>
        <description>&lt;p&gt;I had been brutally reminded that, as of this day, I have zero to no online presence besides my facebook page that I have not updated since September.&lt;/p&gt;

&lt;p&gt;Some friends have tried to give me hints at what I can blog about, and here’s a tentative list:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Subjecting the internet to my crap photoshop art&lt;/li&gt;
  &lt;li&gt;Write about the handful of games that I have not very excelled at playing at (but still insist on playing nonetheless)&lt;/li&gt;
  &lt;li&gt;Write about softward development&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After some rumination I painfully gave in, but at this very moment I chanced upon this wonderful piece of ancient wisdom:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Elbow, you know, the bendy part.”&lt;br /&gt;
            —William Shatner Shakespeare&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The wise man enlightened me that it doesn’t matter what you say, if you say it often enough people will probably understand you or catch on.&lt;/p&gt;

&lt;p&gt;So I regrettably inform you, my imaginary audience, that I will be typing nonesense in the hope that you, my imageinary audience, will cherish me for it.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Dec 2015 00:00:00 -0500</pubDate>
      </item>
    
  </channel>
</rss>
